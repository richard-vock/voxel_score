#ifndef _VOXEL_SCORE_SCENE_
#define _VOXEL_SCORE_SCENE_

#include "common"

namespace voxel_score {

template <typename PointT>
class scene {
public:
    typedef std::unique_ptr<scene<PointT>> uptr_t;
    typedef std::shared_ptr<scene<PointT>> sptr_t;
    typedef std::weak_ptr<scene<PointT>> wptr_t;
    typedef std::shared_ptr<const scene<PointT>> const_sptr_t;
    typedef std::weak_ptr<const scene<PointT>> const_wptr_t;

    typedef pcl::PointCloud<PointT> cloud_t;
    typedef gpu::vector<gpu::float4_> gpu_data_t;

public:
    scene();

    virtual ~scene();

    void init(typename cloud_t::ConstPtr cloud, gpu_state::sptr_t state, const subset_t& valid = subset_t());

    gpu_data_t& device_data();

    const gpu_data_t& device_data() const;

    gpu::vector<int>& device_mask();

    const gpu::vector<int>& device_mask() const;

    void reset_device_mask(gpu_state::sptr_t state, const subset_t& damage);

    void update_device_mask(gpu_state::sptr_t state, const std::vector<int>& damage);

protected:
    struct impl;
    std::unique_ptr<impl> impl_;
};

}  // namespace voxel_score

#ifndef VOXEL_SCORE_PRECOMPILE_HEADERS
#include "impl/scene.hpp"
#endif // VOXEL_SCORE_PRECOMPILE_HEADERS

#endif /* _VOXEL_SCORE_SCENE_ */
// vim: syntax=cpp:
